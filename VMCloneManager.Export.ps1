#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 774d0002-92c6-4b84-9f6e-21d256601483
# Source File: CloneMyVM.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
bQIAAB+LCAAAAAAABACdkl1PgzAYhe+X7D8Q7oGCyLak64VbMLtAzVh2azp4gWrXklJm+PdWYV9R
s8S790lPzzn9wGvI5AFUt6SakvHIsvCLkm+Q6W8wuAXVMClI4CLsHWFYixmH1ZJMJmGOEAqcWZBF
Tribhs6siMAJ/Dy4jyLkh9M77A3iYeuQsulqIMb4Eo/mkucmzvIu05oBBrQeWsbzuY1skmqqdFu7
ddP0WX8prTUUoEBkELci0+Y4czut5IeTUCZiqfavdVPY5EjGsLhhmFZUgRk3qoVf7VfiIN/BeeRy
R7mx923Sz41x9/9Zd1EZxbnvCW8VNuFuyTQrhVRwJeyhv+LTk/T0rFjJBOVfgie6B7LgUkDSbRMT
Vxsl9n5IxiPsXX2vT6JWEQ9tAgAA#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2017 v5.4.140
     Generated on:       5/21/2020 11:58 PM
     Generated by:       Administrator
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2017
#>



#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
2gMAAB+LCAAAAAAABAC9k0tLAzEQgO+C/yH0vGR33a5rIbsglV4EFVfUazadLcE8yiRpyb+3rVJF
QaGHMJd5MPMxL/YIwm4A4w33nOwUJ61pJxe0nHTnZ4Swe5QrabhaSAV3XEPXe44+rOnaOZb/ih5y
rp0DPSgJ7mB/eWKnnbCo5JCR50/WlBZ7ycg8KB8QWgPBI1cZeQi7GuIW4pN9A9MOTcNrUV+Ws2oK
xdWM5ceqPyl9dB50CgZ9kWZpt44uLGqXhLjfVBoQ8q00q1NYRTXWYzOW5bIueMX/Z71qlaSnuUVI
MzyJILzF2ANupICTbuPvMR7Nj0dj+fdf7t4BtbYVHtoDAAA=#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
[void][Reflection.Assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Show-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$script:ExitCode = 0 #Set the exit code for the Packager
}







#endregion Source: Startup.pss

#region Source: MainForm.psf
function Show-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.DirectoryServices, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$MainForm = New-Object 'System.Windows.Forms.Form'
	$buttonDiscClose = New-Object 'System.Windows.Forms.Button'
	$richtextboxLogin = New-Object 'System.Windows.Forms.RichTextBox'
	$grbVM = New-Object 'System.Windows.Forms.GroupBox'
	$progressbarDiskOptions = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonPowerON = New-Object 'System.Windows.Forms.Button'
	$buttonPowerOff = New-Object 'System.Windows.Forms.Button'
	$datagridviewVM = New-Object 'System.Windows.Forms.DataGridView'
	$btnFind = New-Object 'System.Windows.Forms.Button'
	$buttonOpenVMOptions = New-Object 'System.Windows.Forms.Button'
	$txtVM = New-Object 'System.Windows.Forms.TextBox'
	$labelVMName = New-Object 'System.Windows.Forms.Label'
	$grbLogin = New-Object 'System.Windows.Forms.GroupBox'
	$lblConnect = New-Object 'System.Windows.Forms.Label'
	$progressbaroverlayLogin = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$buttonOpen = New-Object 'System.Windows.Forms.Button'
	$checkboxSaveCredentials = New-Object 'System.Windows.Forms.CheckBox'
	$btnSee = New-Object 'System.Windows.Forms.Button'
	$btnLogin = New-Object 'System.Windows.Forms.Button'
	$txtPassword = New-Object 'System.Windows.Forms.TextBox'
	$txtUser = New-Object 'System.Windows.Forms.TextBox'
	$labelPassword = New-Object 'System.Windows.Forms.Label'
	$labelUserName = New-Object 'System.Windows.Forms.Label'
	$labelVCenterServer = New-Object 'System.Windows.Forms.Label'
	$txtVCenter = New-Object 'System.Windows.Forms.TextBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$MainForm_Load={
	#TODO: Initialize Form Controls here
		$json = Test-Path "$env:TEMP\vmclone.json"
		if ($json)
		{
			$obj = Get-Content "$env:TEMP\vmclone.json" -Raw | ConvertFrom-Json
			$txtVCenter.Text = $obj.Vcenter
			$txtUser.Text = $obj.Username
			$secPass = $obj.Password | ConvertTo-SecureString
			$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $($obj.Username), $secPass
			$plainPass = $cred.GetNetworkCredential().Password
			$txtPassword.Text = $plainPass
		}
	}
	
	$buttonOpenVMOptions_Click={
		#TODO: Place custom script here
		$global:VMObject = Get-VM -Name $global:VMname
		
		$progressbarDiskOptions.Visible = $true
		$progressbarDiskOptions.TextOverlay = "Getting Disk Details"
		$progressbarDiskOptions.Style = 'Continuous'
		
		$myVM = $global:VMObject
		$Disks = Get-HardDisk -VM $myVM
		$progressbarDiskOptions.Minimum = 0
		$progressbarDiskOptions.Maximum = $Disks.count + 1
		$progressbarDiskOptions.step = 1
		$progressbarDiskOptions.Value = 0
		
		$global:totalSourceSCSIControllers = Get-ScsiController -VM $myVM | Select-Object "Type", "BusSharingMode", UnitNumber, @{ label = "SCSIController"; Expression = { $_.ExtensionData.DeviceInfo.Label } }
		
		$global:VMDisks = $Disks | ForEach-Object {
			$SCSIinfo = $_ | Get-ScsiController
			$SCSIBus = $SCSIinfo.ExtensionData.BusNumber
			$SCSIType = $SCSIinfo.Type
			$SCSIBusSharingMode = $SCSIinfo.BusSharingMode
			$ScsiUnitNumber = $_.ExtensionData.Unitnumber
			$_ | Select-Object -Property @{ label = "CloneDisk"; Expression = { $false } }, Filename, CapacityGB, Parent, Name, @{ label = "SCSIBus"; Expression = { $SCSIBus } }, @{label = "SCSINode"; Expression = { $ScsiUnitNumber } }, @{ label = "SCSIType"; Expression = { $SCSIType } }, @{ label = "SCSIBusSharingMode"; Expression = { $SCSIBusSharingMode } }
				$progressbarDiskOptions.PerformStep()
				#$progressbarDiskOptions.Refresh()
		}
		$progressbarDiskOptions.PerformStep()
		if((Show-ChildForm_psf) -eq 'OK')
		{
			
		}
		$progressbarDiskOptions.Visible = $false
	}
	
	$btnLogin_Click={
		#TODO: Place custom script here
		$btnLogin.Enabled = $false
		$grbLogin.Enabled = $false
		
		$progressbaroverlayLogin.Visible = $true
		$progressbaroverlayLogin.Minimum = 0
		$progressbaroverlayLogin.Maximum = 4
		$progressbaroverlayLogin.Value = 0
		$progressbaroverlayLogin.Step = 1
		$progressbaroverlayLogin.TextOverlay = "Connecting"
		
		#$null = Import-Module VMware.PowerCLI
		$progressbaroverlayLogin.PerformStep()
		$null = Set-PowerCLIConfiguration -Scope User -ParticipateInCeip $false -Confirm:$false
		$null = Set-PowerCLIConfiguration -InvalidCertificateAction "Ignore" -Confirm:$false -Scope user
		$null = Set-PowerCLIConfiguration -DisplayDeprecationWarnings $false -Confirm:$false -Scope user
		$progressbaroverlayLogin.PerformStep()
		
		$viServer = $txtVCenter.Text
		$Username = $txtUser.Text
		$Password = $txtPassword.Text
		
		function Print-RTB ($txt)
		{
			#$str = (Get-Date).ToLongTimeString()
			$printStr = "$txt`n"
			$richtextboxLogin.AppendText($printStr)
			$richtextboxLogin.ScrollToCaret()
		}
		
		try
		{
			$richtextboxLogin.Visible = $true
			Print-RTB -txt "Connecting to $viServer.`nPlease wait"
			Print-RTB -txt "This may take a minute"
			$progressbaroverlayLogin.PerformStep()
			$MainForm.Refresh()
			
			$connect = Connect-VIServer $viServer -User $Username -Password $Password -ErrorAction Stop
			if ($connect.isConnected)
			{
				$grbVM.Enabled = $true
				Print-RTB -txt "========`nCONNECTED`n========"
				$progressbaroverlayLogin.TextOverlay = "CONNECTED"
				$progressbaroverlayLogin.PerformStep()
				$buttonDiscClose.Enabled = $true
			}
		}
		catch
		{
			$progressbaroverlayLogin.Visible = $false
			$lblConnect.ForeColor = 'White'
			$lblConnect.BackColor = 'Red'
			$lblConnect.Text = "FAILED"
			$msg = $_.Exception.Message
			[System.Windows.Forms.MessageBox]::Show("LOGIN FAILED: $msg", 'LOGIN FAILED', 'OK', 'Error')
			Print-RTB -txt "FAILED"
		}
		if ($checkboxSaveCredentials.Checked)
		{
			$secPass = ConvertTo-SecureString -String $Password -AsPlainText -force | ConvertFrom-SecureString
			$saveObj = [PSCustomObject]@{
				FileLocation = $env:TEMP
				Vcenter = $viServer
				Username = $Username
				Password = $secPass
			}
			$saveObj | ConvertTo-Json | Out-File "$env:TEMP\vmclone.json" -Force
		}
		$btnLogin.Enabled = $true
		$grbLogin.Enabled = $true
	}
	
	$btnSee_MouseDown=[System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
		#TODO: Place custom script here
		$txtPassword.PasswordChar = $null
	}
	
	$btnSee_MouseUp=[System.Windows.Forms.MouseEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.MouseEventArgs]
		#TODO: Place custom script here
		$txtPassword.PasswordChar = "*"
	}
	
	$btnFind_Click={
		#TODO: Place custom script here
		$btnFind.Enabled = $false
		$global:VMname = $txtVM.Text
		try
		{
			$global:VM = Get-VM $VMname -erroraction stop
			#$VMObj = $VM | Select-Object Name, PowerState, NumCPU, MemoryGB, VMHost
			Update-VMInfoDisplay -VMObj $VM
		}
		catch
		{
			$msg = $_.Exception.Message
			[System.Windows.Forms.MessageBox]::Show("VM Not Found: $msg", 'Not Found','OK', 'Warning')
		}
		$btnFind.Enabled = $true
	}
	
	
	$buttonOpen_Click={
		#TODO: Place custom script here
		try
		{
			Invoke-Item -Path $env:TEMP
			Start-Process notepad.exe -ArgumentList "$env:TEMP\vmclone.json" -ErrorAction Stop
		}
		catch
		{}
	}
	
	$buttonPowerON_Click={
		#TODO: Place custom script here
		Start-VM -VM $global:VMObject -Confirm:$false
		Update-VMInfoDisplay -VMObj $VMObject
	}
	
	$buttonPowerOff_Click={
		#TODO: Place custom script here
		Stop-VM -VM $global:VMObject -Confirm:$false -Kill
		Update-VMInfoDisplay -VMObj $VMObject
	}
	
	$buttonDiscClose_Click={
		#TODO: Place custom script here
		$null = Disconnect-VIServer -Server $($txtVCenter.Text) -Force -Confirm:$false -WarningAction SilentlyContinue
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextboxLogin = $richtextboxLogin.Text
		$script:MainForm_datagridviewVM = $datagridviewVM.SelectedCells
		$script:MainForm_txtVM = $txtVM.Text
		$script:MainForm_checkboxSaveCredentials = $checkboxSaveCredentials.Checked
		$script:MainForm_txtPassword = $txtPassword.Text
		$script:MainForm_txtUser = $txtUser.Text
		$script:MainForm_txtVCenter = $txtVCenter.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonDiscClose.remove_Click($buttonDiscClose_Click)
			$buttonPowerON.remove_Click($buttonPowerON_Click)
			$buttonPowerOff.remove_Click($buttonPowerOff_Click)
			$btnFind.remove_Click($btnFind_Click)
			$buttonOpenVMOptions.remove_Click($buttonOpenVMOptions_Click)
			$buttonOpen.remove_Click($buttonOpen_Click)
			$btnSee.remove_MouseDown($btnSee_MouseDown)
			$btnSee.remove_MouseUp($btnSee_MouseUp)
			$btnLogin.remove_Click($btnLogin_Click)
			$MainForm.remove_Load($MainForm_Load)
			$MainForm.remove_Load($Form_StateCorrection_Load)
			$MainForm.remove_Closing($Form_StoreValues_Closing)
			$MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$MainForm.SuspendLayout()
	$grbVM.SuspendLayout()
	$grbLogin.SuspendLayout()
	#
	# MainForm
	#
	$MainForm.Controls.Add($buttonDiscClose)
	$MainForm.Controls.Add($richtextboxLogin)
	$MainForm.Controls.Add($grbVM)
	$MainForm.Controls.Add($grbLogin)
	$MainForm.AcceptButton = $btnFind
	$MainForm.AutoScaleDimensions = '7, 15'
	$MainForm.AutoScaleMode = 'Font'
	$MainForm.ClientSize = '700, 504'
	$MainForm.Font = 'Segoe UI, 9pt'
	#region Binary Data
	$MainForm.Icon = [System.Convert]::FromBase64String('
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
Rodcbhvu8QGz8DTwsCoj7zP4v2IWftZuvwskmb7urUuADfLmm2/ysY9N4t4hhNwv3eN5M5tClwPy
npfc41+Yhf+MsUUICdVqtns9KAA20OLimxQKk3Q6bZIk+VWMPmtmeeB30d2Brewd4B9ijE+GYFfb
7e7gr1Sy3+hFATAEIbB37yTz81cpFD56HZgF/tvMDgH3qUJbTtXdvw6cNrO3KpUr7N370czP/Ku0
BjAk0jQln8/RbkdyuUCrFQ+b8biZHQcOqEKb3qvuftadZ5OEKzFCLhdoNtvrusWbAmDITE9P4+6E
YMTYCiGMFYFjZvYIcD8wriptGivApd4LYudibNV7T4piZqx1lx8FwCZQLpduN1G93qBYLBTMeAjs
KDADHAR29QJBt3OHX+wN+Lfp7uQzBz7rzvl6vdHovijW3dijn/f7FQCbTKlUwh2SxDCDTqcZQsjv
BibBDoPvM7MJhcBwD353X+puDOuXgcUYm8tJko/u0Ok4ZvT9Yo8CYBNL05RardabGdjtpjO14Mh4
b/deB5xKpXq7XUVERERERERERERERERERERERERERERERERERETe3/8CHBn3B3TQYIwAAAAASUVO
RK5CYII=')
	#endregion
	$MainForm.Margin = '4, 3, 4, 3'
	$MainForm.Name = 'MainForm'
	$MainForm.StartPosition = 'CenterScreen'
	$MainForm.Text = 'VM Clone Manager'
	$MainForm.add_Load($MainForm_Load)
	#
	# buttonDiscClose
	#
	$buttonDiscClose.Anchor = 'Top, Right'
	$buttonDiscClose.Enabled = $False
	$buttonDiscClose.Location = '505, 23'
	$buttonDiscClose.Margin = '4, 3, 4, 3'
	$buttonDiscClose.Name = 'buttonDiscClose'
	$buttonDiscClose.Size = '182, 27'
	$buttonDiscClose.TabIndex = 4
	$buttonDiscClose.Text = 'Disconnect And Close'
	$buttonDiscClose.UseVisualStyleBackColor = $True
	$buttonDiscClose.add_Click($buttonDiscClose_Click)
	#
	# richtextboxLogin
	#
	$richtextboxLogin.Anchor = 'Top, Right'
	$richtextboxLogin.BackColor = 'WindowText'
	$richtextboxLogin.Font = 'Consolas, 9pt'
	$richtextboxLogin.ForeColor = 'Lime'
	$richtextboxLogin.Location = '505, 55'
	$richtextboxLogin.Margin = '4, 3, 4, 3'
	$richtextboxLogin.Name = 'richtextboxLogin'
	$richtextboxLogin.Size = '182, 152'
	$richtextboxLogin.TabIndex = 3
	$richtextboxLogin.Text = ''
	$richtextboxLogin.Visible = $False
	#
	# grbVM
	#
	$grbVM.Controls.Add($progressbarDiskOptions)
	$grbVM.Controls.Add($buttonPowerON)
	$grbVM.Controls.Add($buttonPowerOff)
	$grbVM.Controls.Add($datagridviewVM)
	$grbVM.Controls.Add($btnFind)
	$grbVM.Controls.Add($buttonOpenVMOptions)
	$grbVM.Controls.Add($txtVM)
	$grbVM.Controls.Add($labelVMName)
	$grbVM.Anchor = 'Bottom, Left'
	$grbVM.Enabled = $False
	$grbVM.Location = '13, 224'
	$grbVM.Margin = '4, 3, 4, 3'
	$grbVM.Name = 'grbVM'
	$grbVM.Padding = '4, 3, 4, 3'
	$grbVM.Size = '484, 268'
	$grbVM.TabIndex = 2
	$grbVM.TabStop = $False
	$grbVM.Text = 'FIND VM'
	#
	# progressbarDiskOptions
	#
	$progressbarDiskOptions.Anchor = 'Left, Right'
	$progressbarDiskOptions.Location = '23, 218'
	$progressbarDiskOptions.Margin = '4, 3, 4, 3'
	$progressbarDiskOptions.Name = 'progressbarDiskOptions'
	$progressbarDiskOptions.Size = '437, 27'
	$progressbarDiskOptions.TabIndex = 6
	$progressbarDiskOptions.Visible = $False
	#
	# buttonPowerON
	#
	$buttonPowerON.Enabled = $False
	$buttonPowerON.Location = '22, 185'
	$buttonPowerON.Margin = '4, 3, 4, 3'
	$buttonPowerON.Name = 'buttonPowerON'
	$buttonPowerON.Size = '88, 27'
	$buttonPowerON.TabIndex = 5
	$buttonPowerON.Text = 'Power ON'
	$buttonPowerON.UseVisualStyleBackColor = $True
	$buttonPowerON.add_Click($buttonPowerON_Click)
	#
	# buttonPowerOff
	#
	$buttonPowerOff.Enabled = $False
	$buttonPowerOff.Location = '118, 185'
	$buttonPowerOff.Margin = '4, 3, 4, 3'
	$buttonPowerOff.Name = 'buttonPowerOff'
	$buttonPowerOff.Size = '88, 27'
	$buttonPowerOff.TabIndex = 4
	$buttonPowerOff.Text = 'Power OFF'
	$buttonPowerOff.UseVisualStyleBackColor = $True
	$buttonPowerOff.add_Click($buttonPowerOff_Click)
	#
	# datagridviewVM
	#
	$datagridviewVM.AllowUserToAddRows = $False
	$datagridviewVM.AllowUserToDeleteRows = $False
	$datagridviewVM.AllowUserToOrderColumns = $True
	$datagridviewVM.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewVM.Location = '22, 74'
	$datagridviewVM.Margin = '4, 3, 4, 3'
	$datagridviewVM.Name = 'datagridviewVM'
	$datagridviewVM.ReadOnly = $True
	$datagridviewVM.Size = '438, 105'
	$datagridviewVM.TabIndex = 3
	#
	# btnFind
	#
	$btnFind.Location = '372, 33'
	$btnFind.Margin = '4, 3, 4, 3'
	$btnFind.Name = 'btnFind'
	$btnFind.Size = '88, 27'
	$btnFind.TabIndex = 2
	$btnFind.Text = 'FIND VM'
	$btnFind.UseVisualStyleBackColor = $True
	$btnFind.add_Click($btnFind_Click)
	#
	# buttonOpenVMOptions
	#
	$buttonOpenVMOptions.Anchor = 'None'
	$buttonOpenVMOptions.Enabled = $False
	$buttonOpenVMOptions.Location = '346, 185'
	$buttonOpenVMOptions.Margin = '4, 3, 4, 3'
	$buttonOpenVMOptions.Name = 'buttonOpenVMOptions'
	$buttonOpenVMOptions.Size = '114, 27'
	$buttonOpenVMOptions.TabIndex = 0
	$buttonOpenVMOptions.Text = 'Open VM Options'
	$buttonOpenVMOptions.UseVisualStyleBackColor = $True
	$buttonOpenVMOptions.add_Click($buttonOpenVMOptions_Click)
	#
	# txtVM
	#
	$txtVM.Location = '129, 36'
	$txtVM.Margin = '4, 3, 4, 3'
	$txtVM.Name = 'txtVM'
	$txtVM.Size = '174, 23'
	$txtVM.TabIndex = 1
	#
	# labelVMName
	#
	$labelVMName.AutoSize = $True
	$labelVMName.Location = '22, 39'
	$labelVMName.Margin = '4, 0, 4, 0'
	$labelVMName.Name = 'labelVMName'
	$labelVMName.Size = '60, 15'
	$labelVMName.TabIndex = 0
	$labelVMName.Text = 'VM Name'
	#
	# grbLogin
	#
	$grbLogin.Controls.Add($lblConnect)
	$grbLogin.Controls.Add($progressbaroverlayLogin)
	$grbLogin.Controls.Add($buttonOpen)
	$grbLogin.Controls.Add($checkboxSaveCredentials)
	$grbLogin.Controls.Add($btnSee)
	$grbLogin.Controls.Add($btnLogin)
	$grbLogin.Controls.Add($txtPassword)
	$grbLogin.Controls.Add($txtUser)
	$grbLogin.Controls.Add($labelPassword)
	$grbLogin.Controls.Add($labelUserName)
	$grbLogin.Controls.Add($labelVCenterServer)
	$grbLogin.Controls.Add($txtVCenter)
	$grbLogin.Location = '14, 14'
	$grbLogin.Margin = '4, 3, 4, 3'
	$grbLogin.Name = 'grbLogin'
	$grbLogin.Padding = '4, 3, 4, 3'
	$grbLogin.Size = '483, 193'
	$grbLogin.TabIndex = 1
	$grbLogin.TabStop = $False
	$grbLogin.Text = 'Login'
	#
	# lblConnect
	#
	$lblConnect.AutoSize = $True
	$lblConnect.Location = '376, 152'
	$lblConnect.Margin = '4, 0, 4, 0'
	$lblConnect.Name = 'lblConnect'
	$lblConnect.Size = '0, 15'
	$lblConnect.TabIndex = 12
	#
	# progressbaroverlayLogin
	#
	$progressbaroverlayLogin.Location = '371, 150'
	$progressbaroverlayLogin.Margin = '4, 3, 4, 3'
	$progressbaroverlayLogin.Name = 'progressbaroverlayLogin'
	$progressbaroverlayLogin.Size = '88, 23'
	$progressbaroverlayLogin.TabIndex = 11
	$progressbaroverlayLogin.Visible = $False
	#
	# buttonOpen
	#
	$buttonOpen.Location = '277, 150'
	$buttonOpen.Margin = '4, 3, 4, 3'
	$buttonOpen.Name = 'buttonOpen'
	$buttonOpen.Size = '47, 23'
	$buttonOpen.TabIndex = 10
	$buttonOpen.Text = 'Open'
	$buttonOpen.UseVisualStyleBackColor = $True
	$buttonOpen.add_Click($buttonOpen_Click)
	#
	# checkboxSaveCredentials
	#
	$checkboxSaveCredentials.Checked = $True
	$checkboxSaveCredentials.CheckState = 'Checked'
	$checkboxSaveCredentials.Location = '128, 151'
	$checkboxSaveCredentials.Margin = '4, 3, 4, 3'
	$checkboxSaveCredentials.Name = 'checkboxSaveCredentials'
	$checkboxSaveCredentials.Size = '121, 28'
	$checkboxSaveCredentials.TabIndex = 9
	$checkboxSaveCredentials.Text = 'Save Credentials'
	$checkboxSaveCredentials.UseVisualStyleBackColor = $True
	#
	# btnSee
	#
	$btnSee.Location = '306, 112'
	$btnSee.Margin = '4, 3, 4, 3'
	$btnSee.Name = 'btnSee'
	$btnSee.Size = '18, 23'
	$btnSee.TabIndex = 7
	$btnSee.UseVisualStyleBackColor = $True
	$btnSee.add_MouseDown($btnSee_MouseDown)
	$btnSee.add_MouseUp($btnSee_MouseUp)
	#
	# btnLogin
	#
	$btnLogin.Location = '371, 109'
	$btnLogin.Margin = '4, 3, 4, 3'
	$btnLogin.Name = 'btnLogin'
	$btnLogin.Size = '88, 27'
	$btnLogin.TabIndex = 6
	$btnLogin.Text = 'Login'
	$btnLogin.UseVisualStyleBackColor = $True
	$btnLogin.add_Click($btnLogin_Click)
	#
	# txtPassword
	#
	$txtPassword.Location = '128, 112'
	$txtPassword.Margin = '4, 3, 4, 3'
	$txtPassword.Name = 'txtPassword'
	$txtPassword.PasswordChar = '*'
	$txtPassword.Size = '174, 23'
	$txtPassword.TabIndex = 5
	#
	# txtUser
	#
	$txtUser.Location = '128, 78'
	$txtUser.Margin = '4, 3, 4, 3'
	$txtUser.Name = 'txtUser'
	$txtUser.Size = '174, 23'
	$txtUser.TabIndex = 4
	#
	# labelPassword
	#
	$labelPassword.AutoSize = $True
	$labelPassword.Location = '22, 115'
	$labelPassword.Margin = '4, 0, 4, 0'
	$labelPassword.Name = 'labelPassword'
	$labelPassword.Size = '57, 15'
	$labelPassword.TabIndex = 3
	$labelPassword.Text = 'Password'
	#
	# labelUserName
	#
	$labelUserName.AutoSize = $True
	$labelUserName.Location = '19, 81'
	$labelUserName.Margin = '4, 0, 4, 0'
	$labelUserName.Name = 'labelUserName'
	$labelUserName.Size = '60, 15'
	$labelUserName.TabIndex = 2
	$labelUserName.Text = 'Username'
	#
	# labelVCenterServer
	#
	$labelVCenterServer.AutoSize = $True
	$labelVCenterServer.Location = '19, 43'
	$labelVCenterServer.Margin = '4, 0, 4, 0'
	$labelVCenterServer.Name = 'labelVCenterServer'
	$labelVCenterServer.Size = '84, 15'
	$labelVCenterServer.TabIndex = 1
	$labelVCenterServer.Text = 'VCenter Server'
	#
	# txtVCenter
	#
	$txtVCenter.Location = '128, 43'
	$txtVCenter.Margin = '4, 3, 4, 3'
	$txtVCenter.Name = 'txtVCenter'
	$txtVCenter.Size = '331, 23'
	$txtVCenter.TabIndex = 0
	$grbLogin.ResumeLayout()
	$grbVM.ResumeLayout()
	$MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	
	#Sample function that provides the location of the script
	function Get-ScriptDirectory
	{
	<#
		.SYNOPSIS
			Get-ScriptDirectory returns the proper location of the script.
	
		.OUTPUTS
			System.String
		
		.NOTES
			Returns the correct path within a packaged executable.
	#>
		[OutputType([string])]
		param ()
		if ($null -ne $hostinvocation)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			Split-Path $script:MyInvocation.MyCommand.Path
		}
	}
	
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-ScriptDirectory
	
	
	#region Control Helper Functions
	function Update-DataGridView
	{
		<#
		.SYNOPSIS
			This functions helps you load items into a DataGridView.
	
		.DESCRIPTION
			Use this function to dynamically load items into the DataGridView control.
	
		.PARAMETER  DataGridView
			The DataGridView control you want to add items to.
	
		.PARAMETER  Item
			The object or objects you wish to load into the DataGridView's items collection.
		
		.PARAMETER  DataMember
			Sets the name of the list or table in the data source for which the DataGridView is displaying data.
	
		.PARAMETER AutoSizeColumns
		    Resizes DataGridView control's columns after loading the items.
		#>
		Param (
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			[System.Windows.Forms.DataGridView]$DataGridView,
			[ValidateNotNull()]
			[Parameter(Mandatory = $true)]
			$Item,
			[Parameter(Mandatory = $false)]
			[string]$DataMember,
			[System.Windows.Forms.DataGridViewAutoSizeColumnMode]$AutoSizeColumns = 'None'
		)
		$DataGridView.SuspendLayout()
		$DataGridView.DataMember = $DataMember
		
		if ($Item -is [System.Data.DataSet] -and $Item.Tables.Count -gt 0)
		{
			$DataGridView.DataSource = $Item.Tables[0]
		}
		elseif ($Item -is [System.ComponentModel.IListSource]`
			-or $Item -is [System.ComponentModel.IBindingList] -or $Item -is [System.ComponentModel.IBindingListView])
		{
			$DataGridView.DataSource = $Item
		}
		else
		{
			$array = New-Object System.Collections.ArrayList
			
			if ($Item -is [System.Collections.IList])
			{
				$array.AddRange($Item)
			}
			else
			{
				$array.Add($Item)
			}
			$DataGridView.DataSource = $array
		}
		
		if ($AutoSizeColumns -ne 'None')
		{
			$DataGridView.AutoResizeColumns($AutoSizeColumns)
		}
		
		$DataGridView.ResumeLayout()
	}
	
	function ConvertTo-DataTable
	{
		<#
			.SYNOPSIS
				Converts objects into a DataTable.
		
			.DESCRIPTION
				Converts objects into a DataTable, which are used for DataBinding.
		
			.PARAMETER  InputObject
				The input to convert into a DataTable.
		
			.PARAMETER  Table
				The DataTable you wish to load the input into.
		
			.PARAMETER RetainColumns
				This switch tells the function to keep the DataTable's existing columns.
			
			.PARAMETER FilterWMIProperties
				This switch removes WMI properties that start with an underline.
		
			.EXAMPLE
				$DataTable = ConvertTo-DataTable -InputObject (Get-Process)
		#>
		[OutputType([System.Data.DataTable])]
		param (
			[ValidateNotNull()]
			$InputObject,
			[ValidateNotNull()]
			[System.Data.DataTable]$Table,
			[switch]$RetainColumns,
			[switch]$FilterWMIProperties)
		
		if ($null -eq $Table)
		{
			$Table = New-Object System.Data.DataTable
		}
		
		if ($InputObject -is [System.Data.DataTable])
		{
			$Table = $InputObject
		}
		elseif ($InputObject -is [System.Data.DataSet] -and $InputObject.Tables.Count -gt 0)
		{
			$Table = $InputObject.Tables[0]
		}
		else
		{
			if (-not $RetainColumns -or $Table.Columns.Count -eq 0)
			{
				#Clear out the Table Contents
				$Table.Clear()
				
				if ($null -eq $InputObject) { return } #Empty Data
				
				$object = $null
				#find the first non null value
				foreach ($item in $InputObject)
				{
					if ($null -ne $item)
					{
						$object = $item
						break
					}
				}
				
				if ($null -eq $object) { return } #All null then empty
				
				#Get all the properties in order to create the columns
				foreach ($prop in $object.PSObject.Get_Properties())
				{
					if (-not $FilterWMIProperties -or -not $prop.Name.StartsWith('__')) #filter out WMI properties
					{
						#Get the type from the Definition string
						$type = $null
						
						if ($null -ne $prop.Value)
						{
							try { $type = $prop.Value.GetType() }
							catch { Out-Null }
						}
						
						if ($null -ne $type) # -and [System.Type]::GetTypeCode($type) -ne 'Object')
						{
							[void]$table.Columns.Add($prop.Name, $type)
						}
						else #Type info not found
						{
							[void]$table.Columns.Add($prop.Name)
						}
					}
				}
				
				if ($object -is [System.Data.DataRow])
				{
					foreach ($item in $InputObject)
					{
						$Table.Rows.Add($item)
					}
					return @( ,$Table)
				}
			}
			else
			{
				$Table.Rows.Clear()
			}
			
			foreach ($item in $InputObject)
			{
				$row = $table.NewRow()
				
				if ($item)
				{
					foreach ($prop in $item.PSObject.Get_Properties())
					{
						if ($table.Columns.Contains($prop.Name))
						{
							$row.Item($prop.Name) = $prop.Value
						}
					}
				}
				[void]$table.Rows.Add($row)
			}
		}
		
		return @( ,$Table)
	}
	#endregion
	
	#region Control Helper Functions
	function Update-ComboBox
	{
	<#
		.SYNOPSIS
			This functions helps you load items into a ComboBox.
		
		.DESCRIPTION
			Use this function to dynamically load items into the ComboBox control.
		
		.PARAMETER ComboBox
			The ComboBox control you want to add items to.
		
		.PARAMETER Items
			The object or objects you wish to load into the ComboBox's Items collection.
		
		.PARAMETER DisplayMember
			Indicates the property to display for the items in this control.
		
		.PARAMETER Append
			Adds the item(s) to the ComboBox without clearing the Items collection.
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red", "White", "Blue"
		
		.EXAMPLE
			Update-ComboBox $combobox1 "Red" -Append
			Update-ComboBox $combobox1 "White" -Append
			Update-ComboBox $combobox1 "Blue" -Append
		
		.EXAMPLE
			Update-ComboBox $combobox1 (Get-Process) "ProcessName"
		
		.NOTES
			Additional information about the function.
	#>
		
		param
		(
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			[System.Windows.Forms.ComboBox]$ComboBox,
			[Parameter(Mandatory = $true)]
			[ValidateNotNull()]
			$Items,
			[Parameter(Mandatory = $false)]
			[string]$DisplayMember,
			[switch]$Append
		)
		
		if (-not $Append)
		{
			$ComboBox.Items.Clear()
		}
		
		if ($Items -is [Object[]])
		{
			$ComboBox.Items.AddRange($Items)
		}
		elseif ($Items -is [System.Collections.IEnumerable])
		{
			$ComboBox.BeginUpdate()
			foreach ($obj in $Items)
			{
				$ComboBox.Items.Add($obj)
			}
			$ComboBox.EndUpdate()
		}
		else
		{
			$ComboBox.Items.Add($Items)
		}
		
		$ComboBox.DisplayMember = $DisplayMember
	}
	#endregion
	
	function Update-DiskDGV ($Disks)
	{
		Try
		{
			$ErrorActionPreference = 'SilentlyContinue'
			$SelectedRowindex = $datagridviewVM.CurrentRow.Index
			$SelectedColIndex = $datagridviewVMinfo.CurrentCell.ColumnIndex
			$ScrollIndex = $datagridviewVMinfo.FirstDisplayedScrollingRowIndex
			$ScrollIndexCol = $datagridviewVMinfo.FirstDisplayedScrollingColumnIndex
			
			$datagridviewVMinfo.Datasource = $null
			$DiskTable = ConvertTo-DataTable -InputObject $Disks
			Update-DataGridView -DataGridView $datagridviewVMinfo -Item $DiskTable -AutoSizeColumns AllCells
			
			$datagridviewVMinfo.FirstDisplayedScrollingRowIndex = $ScrollIndex
			$datagridviewVMinfo.FirstDisplayedScrollingColumnIndex = $ScrollIndexCol
			$datagridviewVMinfo.CurrentCell.Selected = $false
			$datagridviewVMinfo.Rows[$SelectedRowindex].Cells[$SelectedColIndex].Selected = $true
			$ErrorActionPreference = 'Continue'
		}
		catch
		{}
	}
	
	function Update-VMInfoDisplay ($VMObj)
	{
		$VMObj = Get-VM -Name $($VMObj.Name) | Select-Object Name, PowerState, NumCPU, MemoryGB, VMHost
		if ($VMObj)
		{
			$datagridviewVM.Visible = $true
			$datagridviewVM.DataSource = $null
			$VMTable = ConvertTo-DataTable -InputObject $VMObj
			Update-DataGridView -DataGridView $datagridviewVM -Item $VMTable -AutoSizeColumns AllCells
			
			if ($VMObj.PowerState -eq "PoweredOff")
			{
				$buttonPowerON.Enabled = $true
				$buttonPowerOff.Enabled = $false
				$buttonOpenVMOptions.Enabled = $true
			}
			if ($VMObj.PowerState -eq "PoweredOn")
			{
				$buttonPowerOff.Enabled = $true
				$buttonPowerON.Enabled = $false
				$buttonOpenVMOptions.Enabled = $false
			}
		}
	}
	
	
	#Functions from VMWare
	function Get-InventoryPlus
	{
	<#
	.SYNOPSIS
	Retrieve the objects available on a vSphere Server.
	.DESCRIPTION
	This function will retrieve all objects available on a
	vSphere Server, including all storage and network objects.
	.NOTES
	Author:  Luc Dekens
	.PARAMETER Server
	The vSphere Server (vCenter or ESXi) from which to retrieve
	the objects.
	The default is $Global:DefaultVIServer
	.PARAMETER NoValue
	Properties that are not set are returned as an empty string.
	The value on this parameter will be used instead of the empty
	string.
	.EXAMPLE
	PS> Get-InventoryPlus
	.EXAMPLE
	PS> Get-InventoryPlus -Server $vCenter
	.EXAMPLE
	PS> Get-InventoryPlus -NoValue 'na'
	#>
		[cmdletbinding()]
		param (
			[VMware.VimAutomation.ViCore.Types.V1.VIServer]$Server = $Global:DefaultVIServer,
			[String]$NoValue = ''
		)
		function Get-ViBlueFolderPath
		{
			[cmdletbinding()]
			param (
				[VMware.Vim.ManagedEntity]$Item
			)
			$hidden = 'Datacenters', 'vm'
			if ($Item -is [VMware.Vim.VirtualMachine])
			{
				$Item.UpdateViewData('Parent')
				$parent = $Item.Parent
			}
			elseif ($Item -is [VMware.Vim.VirtualApp])
			{
				$Item.UpdateViewData('ParentFolder')
				$parent = $Item.ParentFolder
			}
			if ($parent)
			{
				$path = @($Item.Name)
				while ($parent)
				{
					$object = Get-View -Id $parent -Property Name, Parent
					if ($hidden -notcontains $object.Name)
					{
						$path += $object.Name
					}
					if ($object -is [VMware.Vim.VirtualApp])
					{
						$object.UpdateViewData('ParentFolder')
						if ($object.ParentFolder)
						{
							$parent = $object.ParentFolder
						}
						else
						{
							$object.UpdateViewData('ParentVapp')
							if ($object.ParentVapp)
							{
								$parent = $object.ParentVapp
							}
						}
					}
					else
					{
						$parent = $object.Parent
					}
				}
				[array]::Reverse($path)
				return "/$($path -join '/')"
			}
			else
			{
				return $NoValue
			}
		}
		function Get-ObjectInfo
		{
			[cmdletbinding()]
			param (
				[parameter(ValueFromPipeline)]
				[VMware.Vim.ManagedEntity]$Object
			)
			Begin
			{
				$hidden = 'Datacenters', 'vm', 'host', 'network', 'datastore', 'Resources'
			}
			Process
			{
				if ($hidden -notcontains $Object.Name)
				{
					$props = [ordered]@{
						Name	 = $Object.Name
						Type	 = $Object.GetType().Name
						BluePath = $NoValue
					}
					$blueFolder = $false
					$isTemplate = $false
					if ($object -is [VMware.Vim.Folder])
					{
						$object.UpdateViewData('ChildType')
						if ($Object.ChildType -contains 'VirtualMachine')
						{
							$blueFolder = $true
						}
					}
					$path = @($Object.Name)
					$parent = $Object.Parent
					if ($object -is [VMware.Vim.VirtualMachine] -or $object -is [VMware.Vim.VirtualApp])
					{
						$props['BluePath'] = Get-VIBlueFolderPath -Item $Object
						if ($Object -is [VMware.Vim.VirtualMachine])
						{
							$Object.UpdateViewData('ResourcePool', 'Config.Template')
							if ($Object.Config.Template)
							{
								$parent = $Object.Parent
								$props['Type'] = 'Template'
								$isTemplate = $true
							}
							else
							{
								$parent = $Object.ResourcePool
							}
						}
					}
					while ($parent)
					{
						$Object = Get-View -Id $Parent -Property Name, Parent
						$parent = $Object.Parent
						if ($hidden -notcontains $Object.Name)
						{
							$path += $Object.Name
						}
					}
					[array]::Reverse($path)
					$path = "/$($path -join '/')"
					$props.Add('Path', $path)
					if ($blueFolder)
					{
						$props['BluePath'] = $props['Path']
						$props['Path'] = $NoValue
					}
					if ($isTemplate)
					{
						$props['Path'] = $NoValue
					}
					New-Object PSObject -Property $props
				}
			}
		}
		$sView = @{
			Id	   = 'ServiceInstance'
			Server   = $Server
			Property = 'Content.ViewManager', 'Content.RootFolder'
		}
		$si = Get-view @sView
		$viewMgr = Get-View -Id $si.Content.ViewManager
		$contView = $viewMgr.CreateContainerView($si.Content.RootFolder, $null, $true)
		$contViewObj = Get-View -Id $contView
		Get-View -Id $contViewObj.View -Property Name, Parent |
		where{ $hidden -notcontains $_.Name } |
		Get-ObjectInfo
	}
	
	#Functions from VMWare
	function Get-FolderByPath
	{
	<#
	.SYNOPSIS Retrieve folders by giving a path
	.DESCRIPTION The function will retrieve a folder by it's path.
	The path can contain any type of leave (folder or datacenter).
	.NOTES
	Author: Luc Dekens .PARAMETER Path The path to the folder. This is a required parameter.
	.PARAMETER
	Path The path to the folder. This is a required parameter.
	.PARAMETER
	Separator The character that is used to separate the leaves in the path. The default is '/'
	.EXAMPLE
	PS> Get-FolderByPath -Path "Folder1/Datacenter/Folder2"
	.EXAMPLE
	PS> Get-FolderByPath -Path "Folder1>Folder2" -Separator '>'
	#>
		param (
			[CmdletBinding()]
			[parameter(Mandatory = $true)]
			[System.String[]]${Path},
			[char]${Separator} = '/'
		)
		process
		{
			if ((Get-PowerCLIConfiguration).DefaultVIServerMode -eq "Multiple")
			{
				$vcs = $global:defaultVIServers
			}
			else
			{
				$vcs = $global:defaultVIServers[0]
			}
			foreach ($vc in $vcs)
			{
				$si = Get-View ServiceInstance -Server $vc
				$rootName = (Get-View -Id $si.Content.RootFolder -Property Name).Name
				foreach ($strPath in $Path)
				{
					$root = Get-Folder -Name $rootName -Server $vc -ErrorAction SilentlyContinue
					$strPath.Split($Separator) | %{
						if ($_)
						{
							$root = Get-Inventory -Name $_ -Location $root -Server $vc -ErrorAction SilentlyContinue
							if ((Get-Inventory -Location $root -NoRecursion | Select -ExpandProperty Name) -contains "vm")
							{
								$root = Get-Inventory -Name "vm" -Location $root -Server $vc -NoRecursion
							}
						}
					}
					$root | where { $_ -is [VMware.VimAutomation.ViCore.Impl.V1.Inventory.FolderImpl] } | %{
						Get-Folder -Name $_.Name -Location $root.Parent -NoRecursion -Server $vc
					}
				}
			}
		}
	}
#endregion Source: Globals.ps1

#region Source: ChildForm.psf
function Show-ChildForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Define SAPIEN Types
	#----------------------------------------------
	try{
		[ProgressBarOverlay] | Out-Null
	}
	catch
	{
		Add-Type -ReferencedAssemblies ('System.Windows.Forms', 'System.Drawing') -TypeDefinition  @" 
		using System;
		using System.Windows.Forms;
		using System.Drawing;
        namespace SAPIENTypes
        {
		    public class ProgressBarOverlay : System.Windows.Forms.ProgressBar
	        {
                public ProgressBarOverlay() : base() { SetStyle(ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint, true); }
	            protected override void WndProc(ref Message m)
	            { 
	                base.WndProc(ref m);
	                if (m.Msg == 0x000F)// WM_PAINT
	                {
	                    if (Style != System.Windows.Forms.ProgressBarStyle.Marquee || !string.IsNullOrEmpty(this.Text))
                        {
                            using (Graphics g = this.CreateGraphics())
                            {
                                using (StringFormat stringFormat = new StringFormat(StringFormatFlags.NoWrap))
                                {
                                    stringFormat.Alignment = StringAlignment.Center;
                                    stringFormat.LineAlignment = StringAlignment.Center;
                                    if (!string.IsNullOrEmpty(this.Text))
                                        g.DrawString(this.Text, this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    else
                                    {
                                        int percent = (int)(((double)Value / (double)Maximum) * 100);
                                        g.DrawString(percent.ToString() + "%", this.Font, Brushes.Black, this.ClientRectangle, stringFormat);
                                    }
                                }
                            }
                        }
	                }
	            }
              
                public string TextOverlay
                {
                    get
                    {
                        return base.Text;
                    }
                    set
                    {
                        base.Text = value;
                        Invalidate();
                    }
                }
	        }
        }
"@ -IgnoreWarnings | Out-Null
	}
	#endregion Define SAPIEN Types

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formCloneOptions = New-Object 'System.Windows.Forms.Form'
	$grbClonedVM = New-Object 'System.Windows.Forms.GroupBox'
	$buttonClonePowerOFF = New-Object 'System.Windows.Forms.Button'
	$buttonClonePowerON = New-Object 'System.Windows.Forms.Button'
	$datagridviewClone = New-Object 'System.Windows.Forms.DataGridView'
	$buttonFinish = New-Object 'System.Windows.Forms.Button'
	$grbSourceVM = New-Object 'System.Windows.Forms.GroupBox'
	$labelVerify = New-Object 'System.Windows.Forms.Label'
	$comboboxDestFolder = New-Object 'System.Windows.Forms.ComboBox'
	$labelSelectDestinationFol = New-Object 'System.Windows.Forms.Label'
	$progressbaroverlayClone = New-Object 'SAPIENTypes.ProgressBarOverlay'
	$richtextboxSource = New-Object 'System.Windows.Forms.RichTextBox'
	$labelEstimatedDiskSpaceRe = New-Object 'System.Windows.Forms.Label'
	$textboxEstSize = New-Object 'System.Windows.Forms.TextBox'
	$textboxCloneName = New-Object 'System.Windows.Forms.TextBox'
	$labelTargetCloneName = New-Object 'System.Windows.Forms.Label'
	$comboboxTarget = New-Object 'System.Windows.Forms.ComboBox'
	$labelSelectTargetESXIHost = New-Object 'System.Windows.Forms.Label'
	$labelSELECTTARGETDATASTOR = New-Object 'System.Windows.Forms.Label'
	$comboboxDataStore = New-Object 'System.Windows.Forms.ComboBox'
	$buttonCloneVM = New-Object 'System.Windows.Forms.Button'
	$datagridviewVMinfo = New-Object 'System.Windows.Forms.DataGridView'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	$formCloneOptions_Load={
		#TODO: Initialize Form Controls here
		$progressbaroverlayClone.Visible = $false
		Update-DiskDGV -Disks $global:VMDisks
		
		$VMHosts = (Get-VMHost).Name
		Update-ComboBox -ComboBox $comboboxTarget $VMHosts
		$VMName = $myVM.Name
		$CLName = "$VMName-CLN001"
		$textboxCloneName.Text = $CLName
		<#$CLV = Get-VM $CLName -ErrorAction SilentlyContinue
		if (!$CLV)
		{
			
			$labelVerify.Text = "VERIFIED"
			$labelVerify.ForeColor = 'White'
			$labelVerify.BackColor = 'Green'
		}#>
		
		$Folders = (Get-InventoryPlus | where { $_.Type -eq 'Folder' }).BluePath | Sort-Object
		Update-ComboBox -ComboBox $comboboxDestFolder -Items $Folders
	}
	$datagridviewVMinfo_CellClick=[System.Windows.Forms.DataGridViewCellEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.DataGridViewCellEventArgs]
		#TODO: Place custom script here
		$colIndx = $datagridviewVMinfo.CurrentCell.ColumnIndex
		if ($colIndx -eq 0)
		{
			$VMfileName = ($datagridviewVMinfo.CurrentRow.DataBoundItem).FileName
			$currentValue = ($global:VMDisks | Where-Object { $_.Filename -eq $VMfileName }).CloneDisk
			if ($currentValue -eq $true)
			{
				($global:VMDisks | Where-Object { $_.Filename -eq $VMfileName }).CloneDisk = $false
			}
			
			if ($currentValue -eq $false)
			{
				($global:VMDisks | Where-Object { $_.Filename -eq $VMfileName }).CloneDisk = $true
			}
			Update-DiskDGV -Disks $global:VMDisks
		}
		
		#Enable clone button only if requirements are met
		$disksToClone = $global:VMDisks | Where-Object { $_.CloneDisk -eq $true }
		if (!$disksToClone)
		{
			$buttonCloneVM.Enabled = $false
		}
		else
		{
			$DataStore = if ($comboboxDataStore.Text) { $true }
			else { $false }
			$DestFolder = if ($comboboxDestFolder.Text) { $true }
			else { $false }
			$ESXI = if ($comboboxTarget.Text) { $true }
			else { $false }
			
			if ($DataStore -and $DestFolder -and $ESXI)
			{
				$buttonCloneVM.Enabled = $true
			}
		}
		$EstimateDiskSize = ($global:VMDisks | Where-Object { $_.CloneDisk -eq $true } | Measure-Object -Property CapacityGB -Sum).sum
		$textboxEstSize.Text = [math]::Round($EstimateDiskSize,2)
	}
	
	$buttonCloneVM_Click={
		#TODO: Place custom script here
		$AnySelectedDisks = $global:VMDisks | Where-Object { $_.CloneDisk -eq $true }
		if ($AnySelectedDisks)
		{
			$progressbaroverlayClone.Visible = $true
			$progressbaroverlayClone.Step = 1
			$progressbaroverlayClone.Style = 'Continuous'
			$count = (($global:VMDisks | Where-Object { $_.CloneDisk -eq $false }).Count) * 2 + 2
			$progressbaroverlayClone.Minimum = 0
			$progressbaroverlayClone.Maximum = $count
			
			
			$CloneName = $textboxCloneName.Text
			$Target = $comboboxTarget.Text
			$DatastoreSelection = $comboboxDataStore.Text
			$Location = Get-FolderByPath -Path $comboboxDestFolder.Text
			$TargetDatastore = ($global:AvailableDatastores | Where-Object { $_.Datastore -eq $DatastoreSelection }).Name
			#New-VM -Name WINCLN01 -VM $global:VM -VMHost $TargetVMhost -Datastore $TargetDatastore
			
			$richtextboxSource.Visible = $true
			function Print-RTB ($txt, [switch]$err)
			{
				$richtextboxSource.SelectionColor = 'Lime'
				$str = (Get-Date).ToLongTimeString()
				$printStr = "$str : $txt`n"
				if ($err)
				{
					$richtextboxSource.SelectionColor = 'Red'
				}
				$richtextboxSource.AppendText($printStr)
				$richtextboxSource.ScrollToCaret()
			}
			
			$ErrorArray = @()
			#Detaching Disks
			$DisksFilesToReAttach = $DisksFilesToDetach = $global:VMDisks | Where-Object { $_.CloneDisk -eq $false }
			foreach ($DiskFile in $DisksFilesToDetach.Filename)
			{
				$DetachDisk = Get-HardDisk -VM $global:VMObject | Where-Object { $_.Filename -eq $DiskFile }
				Print-RTB -txt "Detaching disk $DiskFile"
				$progressbaroverlayClone.TextOverlay = "Detaching disk $DiskFile"
				try
				{
					$null = Remove-HardDisk -HardDisk $DetachDisk -Confirm:$false
					Print-RTB -txt "Detach complete"
					Start-Sleep -Seconds 1
				}
				catch
				{
					Print-RTB -txt "Detach failed: $($_.Exception.Message)" -err
					$ErrorArray += $_.Exception.Message
				}
				$progressbaroverlayClone.PerformStep()
			}
			
			if ($ErrorArray.count -eq 0)
			{
				#Initiate Cloning
				Try
				{
					Print-RTB -txt "Cloning $global:VM"
					$progressbaroverlayClone.TextOverlay = "Waiting on VCenter to Clone $VM to $CloneName"
					$progressbaroverlayClone.PerformStep()
					Print-RTB -txt "Waiting on VCenter..."
					
					#Cloning starts
					$CloneVMObj = New-VM -Name $CloneName -VM $global:VM -VMHost $Target -Datastore $TargetDatastore -Location $Location -ErrorAction Stop -Confirm:$false
					Print-RTB -txt "Cloning complete"
					$progressbaroverlayClone.TextOverlay = "Clone Action Complete"
					$progressbaroverlayClone.PerformStep()
					$CloneActionSuccess = $true
				}
				catch
				{
					Print-RTB -txt "Cloning failed: $($_.Exception.Message)" -err
					$progressbaroverlayClone.TextOverlay = "Failed Cloning"
					$CloneActionSuccess = $false
				}
				
				if ($CloneActionSuccess -eq $true)
				{
					$global:CloneVM = Get-VM -Name $CloneName
				}
				else
				{
					$global:CloneVM = Get-VM -Name $global:VMname
				}
				Print-RTB -txt "Reconfiguring $CloneVM"
				#Reattaching Disk
				
				foreach ($DiskItem in $DisksFilesToReAttach)
				{
					$DiskFile = $DiskItem.Filename
					try
					{
						Print-RTB -txt "Reattaching $DiskFile"
						$progressbaroverlayClone.TextOverlay = "Attaching $DiskFile to $CloneName"
						$NewAttachedDisk = New-HardDisk -VM $CloneVM -DiskPath $DiskFile -ErrorAction Stop -Confirm:$false
						Print-RTB -txt "Reconfiguring attached disk"
						Start-Sleep -Seconds 1
						
						$newSCSIUnitNumber = $NewAttachedDisk.ExtensionData.Unitnumber
						function Reconfigure-SCSIController ($DiskItem, $NewAttachedDisk)
						{
							$OriginalSCSIBus = $DiskItem.SCSIBus
							$newSCSIBus = ($NewAttachedDisk | Get-ScsiController).ExtensionData.BusNumber
							#$newSCSIUnitNumber = $NewAttachedDisk.ExtensionData.Unitnumber
							
							#Reconfigure VM if SCSI Mismatch
							if ($OriginalSCSIBus -ne $newSCSIBus)
							{
								#Change SCSIcontroller
								$ExistingSCSIControllers = Get-ScsiController -VM $global:CloneVM
								$SCSIBusNumbers = ($ExistingSCSIControllers).ExtensionData.BusNumber
								
								if ($SCSIBusNumbers -contains $OriginalSCSIBus)
								{
									$mySCSIController = $ExistingSCSIControllers | Where-Object { $_.ExtensionData.BusNumber -eq $newSCSIBus }
									$NewAttachedDisk = Set-HardDisk -HardDisk $NewAttachedDisk -Controller $mySCSIController -Confirm:$false
								}
								else
								{
									#create new controller
									$controller = New-ScsiController -HardDisk $NewAttachedDisk -Type $($DiskItem.SCSIType) -BusSharingMode $DiskItem.SCSIBusSharingMode -Confirm:$false
									$NewAttachedDisk = Get-VM $CloneVM | Get-HardDisk | Where-Object { $_.ExtensionData.Backing.Uuid -eq $NewAttachedDisk.ExtensionData.Backing.Uuid }
									$NewAttachedDisk = Reconfigure-SCSIController -DiskItem $DiskItem -NewAttachedDisk $NewAttachedDisk
								}
							}
							Return $NewAttachedDisk
						}
						$NewAttachedDisk = Reconfigure-SCSIController -DiskItem $DiskItem -NewAttachedDisk $NewAttachedDisk
						
						
						if ($DiskItem.SCSINode -ne $newSCSIUnitNumber)
						{
							#Change SCSI Unitnumber
							$spec = New-Object VMware.Vim.VirtualMachineConfigSpec
							$spec.deviceChange = New-Object VMware.Vim.VirtualDeviceConfigSpec
							$spec.deviceChange[0].operation = "edit"
							$spec.deviceChange[0].device = $NewAttachedDisk.ExtensionData
							$spec.deviceChange[0].device.unitNumber = $newSCSIUnitNumber
							try
							{
								$ErrorActionPreference = "Stop"
								$CloneVM.ExtensionData.ReconfigVM($spec)
								Start-Sleep -Seconds 1
							}
							catch
							{
								Print-RTB -txt "Reconfigure VM Failed: $($_.Exception.Message)"
							}
							$ErrorActionPreference = "Continue"
						}
						Print-RTB -txt "Reattach Complete"
						$progressbaroverlayClone.PerformStep()
					}
					catch
					{
						Print-RTB -txt "Reattach attempt failed: $($_.Exception.Message)"
					}
				}
				Print-RTB -txt "Completed"
				$progressbaroverlayClone.TextOverlay = "COMPLETED"
				#Populate Clone Datagrid
				$CloneVMDisks = Get-HardDisk -VM $CloneName | ForEach-Object {
					$SCSIinfo = $_ | Get-ScsiController
					$SCSIBus = $SCSIinfo.ExtensionData.BusNumber
					$SCSIType = $SCSIinfo.Type
					$SCSIBusSharingMode = $SCSIinfo.BusSharingMode
					$ScsiUnitNumber = $_.ExtensionData.Unitnumber
					$_ | Select-Object -Property Filename, CapacityGB, Parent, Name, @{ label = "SCSIBus"; Expression = { $SCSIBus } }, @{ label = "SCSINode"; Expression = { $ScsiUnitNumber } }, @{ label = "SCSIType"; Expression = { $SCSIType } }, @{ label = "SCSIBusSharingMode"; Expression = { $SCSIBusSharingMode } }
				}
				$CloneDiskTable = ConvertTo-DataTable -InputObject $CloneVMDisks
				Update-DataGridView -DataGridView $datagridviewClone -Item $CloneDiskTable -AutoSizeColumns AllCells
				
				#Get Clone PowerState
				$ClonePowerState = (Get-VM -Name $CloneName).PowerState
				if ($ClonePowerState -eq "PoweredOff")
				{
					$buttonClonePowerON.Enabled = $true
				}
				if ($ClonePowerState -eq "PoweredON")
				{
					$buttonClonePowerOFF.Enabled = $true
				}
			}
			else
			{
				Print-RTB -txt "ABORT Cloning. Error detaching disks" -err
			}
		}
		else
		{
			[System.Windows.Forms.MessageBox]::Show('Select at least 1 disk on the machine and retry', 'No Disk Selected', 'OK', 'Hand')
		}
	}
	
	$comboboxTarget_SelectedIndexChanged={
		#TODO: Place custom script here
		if ($comboboxTarget.SelectedIndex -eq 0)
		{
			$vmHost = Get-VMHost $($comboboxTarget.Text)
			$global:AvailableDatastores = Get-Datastore -RelatedObject $vmHost -Refresh | Select-object Name, FreeSpaceGB, @{ label = "DataStore"; Expression = { $_.Name + " (Free: " + [math]::Round($_.FreeSpaceGB, 2) + " GB)" } }
			Update-ComboBox -ComboBox $comboboxDataStore -Items $($AvailableDatastores.Datastore)
		}
		
		$DataStore = if ($comboboxDataStore.Text) { $true }
		else { $false }
		$DestFolder = if ($comboboxDestFolder.Text) { $true }
		else { $false }
		$ESXI = if ($comboboxTarget.Text) { $true }
		else { $false }
		
		if ($DataStore -and $DestFolder -and $ESXI)
		{
			$buttonCloneVM.Enabled = $true
		}
		else
		{
			$buttonCloneVM.Enabled = $false
		}
	}
	
	$comboboxDataStore_SelectedIndexChanged={
		#TODO: Place custom script here
		$DataStore = if ($comboboxDataStore.Text) { $true }
		else { $false }
		$DestFolder = if ($comboboxDestFolder.Text) { $true }
		else { $false }
		$ESXI = if ($comboboxTarget.Text) { $true }
		else { $false }
		
		if ($DataStore -and $DestFolder -and $ESXI)
		{
			$buttonCloneVM.Enabled = $true
		}
		else
		{
			$buttonCloneVM.Enabled = $false
		}
	}
	$buttonClonePowerON_Click={
		#TODO: Place custom script here
		$buttonClonePowerON.Enabled = $false
		Start-VM -VM $global:CloneVM -Confirm:$false
		$buttonClonePowerOFF.Enabled = $true
	}
	
	$buttonClonePowerOFF_Click={
		#TODO: Place custom script here
		$buttonClonePowerOFF.Enabled = $false
		Stop-VM -VM $global:CloneVM  -Kill -Confirm:$false
		$buttonClonePowerON.Enabled = $true
	}
	
	$textboxCloneName_TextChanged={
		#TODO: Place custom script here
		$CLName = $textboxCloneName.Text
		if ($CLName)
		{
			$CLV = Get-VM $CLName -ErrorAction SilentlyContinue
			if (!$CLV)
			{
				$labelVerify.Text = "AVAILABLE"
				$labelVerify.ForeColor = 'White'
				$labelVerify.BackColor = 'Green'
			}
			else
			{
				$labelVerify.Text = "EXISTS"
				$labelVerify.ForeColor = 'White'
				$labelVerify.BackColor = 'Red'
			}
		}
		else
		{
			$labelVerify.Text = "EMPTY"
			$labelVerify.ForeColor = 'White'
			$labelVerify.BackColor = 'Red'
		}
		
		If ($labelVerify.Text -eq "AVAILABLE")
		{
			$DataStore = if ($comboboxDataStore.Text) { $true }
			else { $false }
			$DestFolder = if ($comboboxDestFolder.Text) { $true }
			else { $false }
			$ESXI = if ($comboboxTarget.Text) { $true }
			else { $false }
			
			if ($DataStore -and $DestFolder -and $ESXI)
			{
				$buttonCloneVM.Enabled = $true
			}
			else
			{
				$buttonCloneVM.Enabled = $false
			}
			$comboboxDataStore.Enabled = $true
		}
		else
		{
			$comboboxDataStore.Enabled = $false
			$comboboxDataStore.SelectedIndex = -1
			$buttonCloneVM.Enabled = $false
		}
		
	}
	$comboboxDestFolder_SelectedIndexChanged={
		#TODO: Place custom script here
		$DataStore = if ($comboboxDataStore.Text) { $true }
		else { $false }
		$DestFolder = if ($comboboxDestFolder.Text) { $true }
		else { $false }
		$ESXI = if ($comboboxTarget.Text) { $true }
		else { $false }
		
		if ($DataStore -and $DestFolder -and $ESXI)
		{
			$buttonCloneVM.Enabled = $true
		}
		else
		{
			$buttonCloneVM.Enabled = $false
		}
	}
	
	$datagridviewClone_Scroll=[System.Windows.Forms.ScrollEventHandler]{
	#Event Argument: $_ = [System.Windows.Forms.ScrollEventArgs]
		#TODO: Place custom script here
		#$datagridviewClone.scrollev
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formCloneOptions.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:ChildForm_datagridviewClone = $datagridviewClone.SelectedCells
		$script:ChildForm_comboboxDestFolder = $comboboxDestFolder.Text
		$script:ChildForm_comboboxDestFolder_SelectedItem = $comboboxDestFolder.SelectedItem
		$script:ChildForm_richtextboxSource = $richtextboxSource.Text
		$script:ChildForm_textboxEstSize = $textboxEstSize.Text
		$script:ChildForm_textboxCloneName = $textboxCloneName.Text
		$script:ChildForm_comboboxTarget = $comboboxTarget.Text
		$script:ChildForm_comboboxTarget_SelectedItem = $comboboxTarget.SelectedItem
		$script:ChildForm_comboboxDataStore = $comboboxDataStore.Text
		$script:ChildForm_comboboxDataStore_SelectedItem = $comboboxDataStore.SelectedItem
		$script:ChildForm_datagridviewVMinfo = $datagridviewVMinfo.SelectedCells
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$buttonClonePowerOFF.remove_Click($buttonClonePowerOFF_Click)
			$buttonClonePowerON.remove_Click($buttonClonePowerON_Click)
			$datagridviewClone.remove_Scroll($datagridviewClone_Scroll)
			$comboboxDestFolder.remove_SelectedIndexChanged($comboboxDestFolder_SelectedIndexChanged)
			$textboxCloneName.remove_TextChanged($textboxCloneName_TextChanged)
			$comboboxTarget.remove_SelectedIndexChanged($comboboxTarget_SelectedIndexChanged)
			$comboboxDataStore.remove_SelectedIndexChanged($comboboxDataStore_SelectedIndexChanged)
			$buttonCloneVM.remove_Click($buttonCloneVM_Click)
			$datagridviewVMinfo.remove_CellClick($datagridviewVMinfo_CellClick)
			$formCloneOptions.remove_Load($formCloneOptions_Load)
			$formCloneOptions.remove_Load($Form_StateCorrection_Load)
			$formCloneOptions.remove_Closing($Form_StoreValues_Closing)
			$formCloneOptions.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formCloneOptions.SuspendLayout()
	$grbClonedVM.SuspendLayout()
	$grbSourceVM.SuspendLayout()
	#
	# formCloneOptions
	#
	$formCloneOptions.Controls.Add($grbClonedVM)
	$formCloneOptions.Controls.Add($grbSourceVM)
	$formCloneOptions.AutoScaleDimensions = '7, 15'
	$formCloneOptions.AutoScaleMode = 'Font'
	$formCloneOptions.ClientSize = '1015, 690'
	$formCloneOptions.Font = 'Segoe UI, 9pt'
	#region Binary Data
	$formCloneOptions.Icon = [System.Convert]::FromBase64String('
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
Rodcbhvu8QGz8DTwsCoj7zP4v2IWftZuvwskmb7urUuADfLmm2/ysY9N4t4hhNwv3eN5M5tClwPy
npfc41+Yhf+MsUUICdVqtns9KAA20OLimxQKk3Q6bZIk+VWMPmtmeeB30d2Brewd4B9ijE+GYFfb
7e7gr1Sy3+hFATAEIbB37yTz81cpFD56HZgF/tvMDgH3qUJbTtXdvw6cNrO3KpUr7N370czP/Ku0
BjAk0jQln8/RbkdyuUCrFQ+b8biZHQcOqEKb3qvuftadZ5OEKzFCLhdoNtvrusWbAmDITE9P4+6E
YMTYCiGMFYFjZvYIcD8wriptGivApd4LYudibNV7T4piZqx1lx8FwCZQLpduN1G93qBYLBTMeAjs
KDADHAR29QJBt3OHX+wN+Lfp7uQzBz7rzvl6vdHovijW3dijn/f7FQCbTKlUwh2SxDCDTqcZQsjv
BibBDoPvM7MJhcBwD353X+puDOuXgcUYm8tJko/u0Ok4ZvT9Yo8CYBNL05RardabGdjtpjO14Mh4
b/deB5xKpXq7XUVERERERERERERERERERERERERERERERERERETe3/8CHBn3B3TQYIwAAAAASUVO
RK5CYII=')
	#endregion
	$formCloneOptions.Margin = '4, 3, 4, 3'
	$formCloneOptions.Name = 'formCloneOptions'
	$formCloneOptions.StartPosition = 'CenterParent'
	$formCloneOptions.Text = 'Clone Options'
	$formCloneOptions.add_Load($formCloneOptions_Load)
	#
	# grbClonedVM
	#
	$grbClonedVM.Controls.Add($buttonClonePowerOFF)
	$grbClonedVM.Controls.Add($buttonClonePowerON)
	$grbClonedVM.Controls.Add($datagridviewClone)
	$grbClonedVM.Controls.Add($buttonFinish)
	$grbClonedVM.Anchor = 'Bottom, Left, Right'
	$grbClonedVM.Location = '14, 442'
	$grbClonedVM.Margin = '4, 3, 4, 3'
	$grbClonedVM.Name = 'grbClonedVM'
	$grbClonedVM.Padding = '4, 3, 4, 3'
	$grbClonedVM.Size = '988, 236'
	$grbClonedVM.TabIndex = 4
	$grbClonedVM.TabStop = $False
	$grbClonedVM.Text = 'CLONED VM'
	#
	# buttonClonePowerOFF
	#
	$buttonClonePowerOFF.Anchor = 'Bottom, Right'
	$buttonClonePowerOFF.Enabled = $False
	$buttonClonePowerOFF.Location = '7, 203'
	$buttonClonePowerOFF.Margin = '4, 3, 4, 3'
	$buttonClonePowerOFF.Name = 'buttonClonePowerOFF'
	$buttonClonePowerOFF.Size = '111, 27'
	$buttonClonePowerOFF.TabIndex = 5
	$buttonClonePowerOFF.Text = 'Clone Power OFF'
	$buttonClonePowerOFF.UseVisualStyleBackColor = $True
	$buttonClonePowerOFF.add_Click($buttonClonePowerOFF_Click)
	#
	# buttonClonePowerON
	#
	$buttonClonePowerON.Anchor = 'Bottom, Right'
	$buttonClonePowerON.Enabled = $False
	$buttonClonePowerON.Location = '522, 203'
	$buttonClonePowerON.Margin = '4, 3, 4, 3'
	$buttonClonePowerON.Name = 'buttonClonePowerON'
	$buttonClonePowerON.Size = '111, 27'
	$buttonClonePowerON.TabIndex = 4
	$buttonClonePowerON.Text = 'Clone Power ON'
	$buttonClonePowerON.UseVisualStyleBackColor = $True
	$buttonClonePowerON.add_Click($buttonClonePowerON_Click)
	#
	# datagridviewClone
	#
	$datagridviewClone.AllowUserToAddRows = $False
	$datagridviewClone.AllowUserToDeleteRows = $False
	$datagridviewClone.AllowUserToOrderColumns = $True
	$datagridviewClone.Anchor = 'Top, Left, Right'
	$datagridviewClone.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewClone.Location = '8, 22'
	$datagridviewClone.Margin = '4, 3, 4, 3'
	$datagridviewClone.Name = 'datagridviewClone'
	$datagridviewClone.ReadOnly = $True
	$datagridviewClone.Size = '625, 176'
	$datagridviewClone.TabIndex = 3
	$datagridviewClone.add_Scroll($datagridviewClone_Scroll)
	#
	# buttonFinish
	#
	$buttonFinish.Anchor = 'Bottom, Right'
	$buttonFinish.DialogResult = 'OK'
	$buttonFinish.Location = '861, 203'
	$buttonFinish.Margin = '4, 3, 4, 3'
	$buttonFinish.Name = 'buttonFinish'
	$buttonFinish.Size = '119, 27'
	$buttonFinish.TabIndex = 1
	$buttonFinish.Text = 'FINISH'
	$buttonFinish.UseVisualStyleBackColor = $True
	#
	# grbSourceVM
	#
	$grbSourceVM.Controls.Add($labelVerify)
	$grbSourceVM.Controls.Add($comboboxDestFolder)
	$grbSourceVM.Controls.Add($labelSelectDestinationFol)
	$grbSourceVM.Controls.Add($progressbaroverlayClone)
	$grbSourceVM.Controls.Add($richtextboxSource)
	$grbSourceVM.Controls.Add($labelEstimatedDiskSpaceRe)
	$grbSourceVM.Controls.Add($textboxEstSize)
	$grbSourceVM.Controls.Add($textboxCloneName)
	$grbSourceVM.Controls.Add($labelTargetCloneName)
	$grbSourceVM.Controls.Add($comboboxTarget)
	$grbSourceVM.Controls.Add($labelSelectTargetESXIHost)
	$grbSourceVM.Controls.Add($labelSELECTTARGETDATASTOR)
	$grbSourceVM.Controls.Add($comboboxDataStore)
	$grbSourceVM.Controls.Add($buttonCloneVM)
	$grbSourceVM.Controls.Add($datagridviewVMinfo)
	$grbSourceVM.Anchor = 'Top, Bottom, Left, Right'
	$grbSourceVM.Location = '14, 14'
	$grbSourceVM.Margin = '4, 3, 4, 3'
	$grbSourceVM.Name = 'grbSourceVM'
	$grbSourceVM.Padding = '4, 3, 4, 3'
	$grbSourceVM.Size = '987, 413'
	$grbSourceVM.TabIndex = 3
	$grbSourceVM.TabStop = $False
	$grbSourceVM.Text = 'SOURCE VM'
	#
	# labelVerify
	#
	$labelVerify.AutoSize = $True
	$labelVerify.Location = '422, 228'
	$labelVerify.Margin = '4, 0, 4, 0'
	$labelVerify.Name = 'labelVerify'
	$labelVerify.Size = '0, 15'
	$labelVerify.TabIndex = 18
	#
	# comboboxDestFolder
	#
	$comboboxDestFolder.DropDownStyle = 'DropDownList'
	$comboboxDestFolder.FormattingEnabled = $True
	$comboboxDestFolder.Location = '158, 300'
	$comboboxDestFolder.Margin = '4, 3, 4, 3'
	$comboboxDestFolder.Name = 'comboboxDestFolder'
	$comboboxDestFolder.Size = '249, 23'
	$comboboxDestFolder.TabIndex = 17
	$comboboxDestFolder.add_SelectedIndexChanged($comboboxDestFolder_SelectedIndexChanged)
	#
	# labelSelectDestinationFol
	#
	$labelSelectDestinationFol.AutoSize = $True
	$labelSelectDestinationFol.Location = '8, 303'
	$labelSelectDestinationFol.Margin = '4, 0, 4, 0'
	$labelSelectDestinationFol.Name = 'labelSelectDestinationFol'
	$labelSelectDestinationFol.Size = '137, 15'
	$labelSelectDestinationFol.TabIndex = 16
	$labelSelectDestinationFol.Text = 'Select Destination Folder'
	#
	# progressbaroverlayClone
	#
	$progressbaroverlayClone.Anchor = 'Left, Right'
	$progressbaroverlayClone.Location = '7, 380'
	$progressbaroverlayClone.Margin = '4, 3, 4, 3'
	$progressbaroverlayClone.Name = 'progressbaroverlayClone'
	$progressbaroverlayClone.Size = '626, 27'
	$progressbaroverlayClone.TabIndex = 15
	$progressbaroverlayClone.Visible = $False
	#
	# richtextboxSource
	#
	$richtextboxSource.Anchor = 'Top, Bottom, Right'
	$richtextboxSource.BackColor = 'Desktop'
	$richtextboxSource.Font = 'Consolas, 9pt'
	$richtextboxSource.ForeColor = 'Lime'
	$richtextboxSource.Location = '641, 22'
	$richtextboxSource.Margin = '4, 3, 4, 3'
	$richtextboxSource.Name = 'richtextboxSource'
	$richtextboxSource.Size = '339, 385'
	$richtextboxSource.TabIndex = 14
	$richtextboxSource.Text = ''
	$richtextboxSource.Visible = $False
	#
	# labelEstimatedDiskSpaceRe
	#
	$labelEstimatedDiskSpaceRe.Anchor = 'Top, Right'
	$labelEstimatedDiskSpaceRe.AutoSize = $True
	$labelEstimatedDiskSpaceRe.Location = '513, 218'
	$labelEstimatedDiskSpaceRe.Margin = '4, 0, 4, 0'
	$labelEstimatedDiskSpaceRe.Name = 'labelEstimatedDiskSpaceRe'
	$labelEstimatedDiskSpaceRe.Size = '120, 30'
	$labelEstimatedDiskSpaceRe.TabIndex = 13
	$labelEstimatedDiskSpaceRe.Text = 'Estimated Disk Space
Required in Datastore'
	#
	# textboxEstSize
	#
	$textboxEstSize.Anchor = 'Top, Right'
	$textboxEstSize.Location = '573, 262'
	$textboxEstSize.Margin = '4, 3, 4, 3'
	$textboxEstSize.Name = 'textboxEstSize'
	$textboxEstSize.ReadOnly = $True
	$textboxEstSize.Size = '60, 23'
	$textboxEstSize.TabIndex = 12
	#
	# textboxCloneName
	#
	$textboxCloneName.Location = '158, 225'
	$textboxCloneName.Margin = '4, 3, 4, 3'
	$textboxCloneName.Name = 'textboxCloneName'
	$textboxCloneName.Size = '249, 23'
	$textboxCloneName.TabIndex = 10
	$textboxCloneName.add_TextChanged($textboxCloneName_TextChanged)
	#
	# labelTargetCloneName
	#
	$labelTargetCloneName.AutoSize = $True
	$labelTargetCloneName.Location = '8, 228'
	$labelTargetCloneName.Margin = '4, 0, 4, 0'
	$labelTargetCloneName.Name = 'labelTargetCloneName'
	$labelTargetCloneName.Size = '110, 15'
	$labelTargetCloneName.TabIndex = 9
	$labelTargetCloneName.Text = 'Target Clone Name'
	#
	# comboboxTarget
	#
	$comboboxTarget.DropDownStyle = 'DropDownList'
	$comboboxTarget.FormattingEnabled = $True
	$comboboxTarget.Location = '158, 262'
	$comboboxTarget.Margin = '4, 3, 4, 3'
	$comboboxTarget.Name = 'comboboxTarget'
	$comboboxTarget.Size = '249, 23'
	$comboboxTarget.TabIndex = 8
	$comboboxTarget.add_SelectedIndexChanged($comboboxTarget_SelectedIndexChanged)
	#
	# labelSelectTargetESXIHost
	#
	$labelSelectTargetESXIHost.AutoSize = $True
	$labelSelectTargetESXIHost.Location = '8, 265'
	$labelSelectTargetESXIHost.Margin = '4, 0, 4, 0'
	$labelSelectTargetESXIHost.Name = 'labelSelectTargetESXIHost'
	$labelSelectTargetESXIHost.Size = '128, 15'
	$labelSelectTargetESXIHost.TabIndex = 7
	$labelSelectTargetESXIHost.Text = 'Select Target ESXI Host'
	#
	# labelSELECTTARGETDATASTOR
	#
	$labelSELECTTARGETDATASTOR.AutoSize = $True
	$labelSELECTTARGETDATASTOR.Location = '8, 342'
	$labelSELECTTARGETDATASTOR.Margin = '4, 0, 4, 0'
	$labelSELECTTARGETDATASTOR.Name = 'labelSELECTTARGETDATASTOR'
	$labelSELECTTARGETDATASTOR.Size = '128, 15'
	$labelSELECTTARGETDATASTOR.TabIndex = 6
	$labelSELECTTARGETDATASTOR.Text = 'Select Target Datastore'
	#
	# comboboxDataStore
	#
	$comboboxDataStore.DropDownStyle = 'DropDownList'
	$comboboxDataStore.FormattingEnabled = $True
	$comboboxDataStore.Location = '158, 339'
	$comboboxDataStore.Margin = '4, 3, 4, 3'
	$comboboxDataStore.Name = 'comboboxDataStore'
	$comboboxDataStore.Size = '249, 23'
	$comboboxDataStore.TabIndex = 5
	$comboboxDataStore.add_SelectedIndexChanged($comboboxDataStore_SelectedIndexChanged)
	#
	# buttonCloneVM
	#
	$buttonCloneVM.Anchor = 'Top, Right'
	$buttonCloneVM.Enabled = $False
	$buttonCloneVM.Location = '503, 336'
	$buttonCloneVM.Margin = '4, 3, 4, 3'
	$buttonCloneVM.Name = 'buttonCloneVM'
	$buttonCloneVM.Size = '130, 27'
	$buttonCloneVM.TabIndex = 4
	$buttonCloneVM.Text = 'Clone VM'
	$buttonCloneVM.UseVisualStyleBackColor = $True
	$buttonCloneVM.add_Click($buttonCloneVM_Click)
	#
	# datagridviewVMinfo
	#
	$datagridviewVMinfo.AllowUserToAddRows = $False
	$datagridviewVMinfo.AllowUserToDeleteRows = $False
	$datagridviewVMinfo.AllowUserToOrderColumns = $True
	$datagridviewVMinfo.Anchor = 'Top, Left, Right'
	$datagridviewVMinfo.ColumnHeadersHeightSizeMode = 'AutoSize'
	$datagridviewVMinfo.Location = '7, 22'
	$datagridviewVMinfo.Margin = '4, 3, 4, 3'
	$datagridviewVMinfo.Name = 'datagridviewVMinfo'
	$datagridviewVMinfo.ReadOnly = $True
	$datagridviewVMinfo.Size = '626, 187'
	$datagridviewVMinfo.TabIndex = 2
	$datagridviewVMinfo.add_CellClick($datagridviewVMinfo_CellClick)
	$grbSourceVM.ResumeLayout()
	$grbClonedVM.ResumeLayout()
	$formCloneOptions.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formCloneOptions.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formCloneOptions.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formCloneOptions.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$formCloneOptions.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $formCloneOptions.ShowDialog()

}
#endregion Source: ChildForm.psf

#Start the application
Main ($CommandLine)
